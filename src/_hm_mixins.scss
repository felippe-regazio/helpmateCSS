/*
  PROPERTY TO CLASS
  Transform a css property into a class. The $prefix
  is your class name, $prop must be a valid css prop
  that will be applyed, and the $values must be a list
  with the $prop possible values. So, the result will
  be single classes of your prefix + all values that will
  apply your prop and values to the desired element.
*/
@mixin propertyToClass($prefix, $prop, $values){
  @each $key in $values{ 
    .#{$prefix}{ 
      &\:#{$key}{
        #{$prop}: $key; 
      }
    } 
  }  
}
/* 
  SIZEFY 
  Factory mixin Used to create sized prop class forks 
*/ 
@mixin sizefy($class, $prop, $initialValue){ 
  .#{$class}{ 
    #{$prop}: $initialValue; 
    &\:xs{ 
      #{$prop}: calc(#{$initialValue} / 4); 
    } 
    &\:sm{ 
      #{$prop}: calc(#{$initialValue} / 2); 
    } 
    &\:md{ 
      #{$prop}: calc(#{$initialValue} * 2); 
    }
    &\:lg{ 
      #{$prop}: calc(#{$initialValue} * 3); 
    } 
    &\:xl{ 
      #{$prop}: calc(#{$initialValue} * 4); 
    }
    &\:none{ 
      #{$prop}: 0;
    } 
  } 
} 
/* 
  HORIZONTAL AND VERTICAL 
  Use it to create sized hoz and vert class sizes 
  Will create class-horizontal and class-vertical 
  You can bind sm, md, log, xl, no size mods on class 
*/ 
@mixin hoz-and-vert($prefix, $prop, $initialValue){ 
  .#{$prefix}-hori{ 
    #{$prop}-left: $initialValue; 
    #{$prop}-right: $initialValue; 
    &\:xs{ 
      #{$prop}-left: calc(#{$initialValue} / 3); 
      #{$prop}-right: calc(#{$initialValue} / 3); 
    } 
    &\:sm{ 
      #{$prop}-left: calc(#{$initialValue} / 2); 
      #{$prop}-right: calc(#{$initialValue} / 2); 
    } 
    &\:md{ 
      #{$prop}-left: calc(#{$initialValue} * 2); 
      #{$prop}-right: calc(#{$initialValue} * 2); 
    } 
    &\:lg{ 
      #{$prop}-left: calc(#{$initialValue} * 3); 
      #{$prop}-right: calc(#{$initialValue} * 3); 
    } 
    &\:xl{ 
      #{$prop}-left: calc(#{$initialValue} * 4); 
      #{$prop}-right: calc(#{$initialValue} * 4); 
    } 
    &\:none{ 
      #{$prop}: 0; 
    } 
  } 
  .#{$prefix}-vert{ 
    #{$prop}-top: $initialValue; 
    #{$prop}-bottom: $initialValue; 
    &\:xs{ 
      #{$prop}-top: calc(#{$initialValue} / 3); 
      #{$prop}-bottom: calc(#{$initialValue} / 3); 
    } 
    &\:sm{ 
      #{$prop}-top: calc(#{$initialValue} / 2); 
      #{$prop}-bottom: calc(#{$initialValue} / 2); 
    } 
    &\:md{ 
      #{$prop}-top: calc(#{$initialValue} * 2); 
      #{$prop}-bottom: calc(#{$initialValue} * 2); 
    } 
    &\:lg{ 
      #{$prop}-top: calc(#{$initialValue} * 3); 
      #{$prop}-bottom: calc(#{$initialValue} * 3); 
    } 
    &\:xl{ 
      #{$prop}-top: calc(#{$initialValue} * 4); 
      #{$prop}-bottom: calc(#{$initialValue} * 4); 
    } 
    &\:none{ 
      #{$prop}: 0; 
    } 
  } 
}
/* 
  BORDER STYLES
  This is an static mixin used to include a class
  which can manipulate all border styles
*/
@mixin classBorderStyles($prefix){
  $bordstyles: none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset; 
  @each $key in $bordstyles{ 
    .#{$prefix}{ 
      &\:#{$key}{
        border-style: #{$key}; 
      }
      &-top\:#{$key}{ 
        border-top-style: $key; 
      } 
      &-right\:#{$key}{ 
        border-right-style: $key; 
      } 
      &-left\:#{$key}{ 
        border-left-style: $key; 
      } 
      &-bottom\:#{$key}{
        border-bottom-style: $key; 
      } 
      &-hori\:#{$key}{ 
        border-top-style: $key; 
        border-bottom-style: $key; 
      } 
      &-vert\:#{$key}{ 
        border-right-style: $key; 
        border-left-style: $key; 
      } 
    } 
  }
}
/* 
  BORDER RADIUS TOP & BOTTOM 
  Create a short and bottom border radius shortcut 
  to be used as round-top[sizes] and round-bottom[sizes] 
*/
@mixin classBorderRadiusTopBottom($prefix){
  $shortrounds: top, bottom; 
  @each $key in $shortrounds{ 
    .#{$prefix}-#{$key}{ 
      @extend .round-#{$key}-right; 
      @extend .round-#{$key}-left; 
      &\:xs{ 
        @extend .round-#{$key}-right\:xs; 
        @extend .round-#{$key}-left\:xs; 
      } 
      &\:sm{ 
        @extend .round-#{$key}-right\:sm; 
        @extend .round-#{$key}-left\:sm; 
      } 
      &\:md{ 
        @extend .round-#{$key}-right\:md; 
        @extend .round-#{$key}-left\:md; 
      } 
      &\:lg{ 
        @extend .round-#{$key}-right\:lg; 
        @extend .round-#{$key}-left\:lg; 
      } 
      &\:xl{ 
        @extend .round-#{$key}-right\:xl; 
        @extend .round-#{$key}-left\:xl; 
      } 
      &\:none{ 
        @extend .round-#{$key}-right\:none;
        @extend .round-#{$key}-left\:none;
      } 
    } 
  } 
}
/* 
  BORDER RADIUS 100% (CIRCLE) 
*/
@mixin classBorderRadiusCircle($prefix){
  .#{$prefix}-circle{ 
    border-radius: 100%; 
  }
}
/*
  CENTRALIZERS
*/
@mixin centralizers($prefix){
  .#{$prefix}{
    &\:auto{
      display: block;
      position: relative;
      margin: 0 auto;
    }
    &\:flex{
      display: flex;
      align-items: center;
      justify-content: center;
      flex-wrap: wrap;
    }
    &\:absolute{
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
    &-hori{
      &\:flex{
        @extend .#{$prefix}\:flex;
        align-items: unset;  
      }
    }
    &-vert{
      &\:flex{
        @extend .#{$prefix}\:flex;
        justify-content: unset;
      }
    }
  }
}
/*
  HIDDEN
*/
@mixin hideAt($breakpoint){
  @media screen and(max-width: $breakpoint){
    display: none;
  }
}
@mixin classHidings($prefix){
  .#{$prefix}{
    display: none;
    &\:mobile-sm{
      @include hideAt(319px);
    }
    &\:mobile-md{
      @include hideAt(374px);
    }
    &:\mobile{
      @include hideAt(424px);
    }
    &\:tablet{
      @include hideAt(767px);
    }
    &\:laptop{
      @include hideAt(1023px);
    }
    &:\:destop{
      @include hideAt(1439px);
    }
    &:\desktop-lg{
      @include hideAt(2560px);
    }
  }
}