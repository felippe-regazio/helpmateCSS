/*
  PROPERTY TO CLASS
  Transform a css property into a class. The $prefix
  is your class name, $prop must be a valid css prop
  that will be applyed, and the $values must be a list
  with the $prop possible values. So, the result will
  be single classes of your prefix + all values that will
  apply your prop and values to the desired element.
*/
@mixin propertyToClass($prefix, $prop, $values){
  @each $key in $values{ 
    .#{$prefix}{ 
      &\:#{$key}{
        #{$prop}: $key; 
      }
    } 
  }
}
/* 
  SIZEFY 
  Factory mixin Used to create sized prop class forks 
*/ 
@mixin sizefy($class, $prop, $initialValue){ 
  .#{$class}{
    #{$prop}: $initialValue; 
    &\:xs{ 
      #{$prop}: calc(#{$initialValue} / 4); 
    } 
    &\:sm{ 
      #{$prop}: calc(#{$initialValue} / 2); 
    } 
    &\:md{ 
      #{$prop}: calc(#{$initialValue} * 2); 
    }
    &\:lg{ 
      #{$prop}: calc(#{$initialValue} * 3); 
    } 
    &\:xl{ 
      #{$prop}: calc(#{$initialValue} * 4); 
    }
    &\:none{ 
      #{$prop}: 0;
    } 
  } 
} 
/* 
  HORIZONTAL AND VERTICAL 
  Use it to create sized hoz and vert class sizes 
  Will create class-horizontal and class-vertical 
  You can bind sm, md, log, xl, no size mods on class 
*/ 
@mixin hoz-and-vert($prefix, $prop, $initialValue){ 
  .#{$prefix}-hz{ 
    #{$prop}-left: $initialValue; 
    #{$prop}-right: $initialValue; 
    &\:xs{ 
      #{$prop}-left: calc(#{$initialValue} / 3); 
      #{$prop}-right: calc(#{$initialValue} / 3); 
    } 
    &\:sm{ 
      #{$prop}-left: calc(#{$initialValue} / 2); 
      #{$prop}-right: calc(#{$initialValue} / 2); 
    } 
    &\:md{ 
      #{$prop}-left: calc(#{$initialValue} * 2); 
      #{$prop}-right: calc(#{$initialValue} * 2); 
    } 
    &\:lg{ 
      #{$prop}-left: calc(#{$initialValue} * 3); 
      #{$prop}-right: calc(#{$initialValue} * 3); 
    } 
    &\:xl{ 
      #{$prop}-left: calc(#{$initialValue} * 4); 
      #{$prop}-right: calc(#{$initialValue} * 4); 
    } 
    &\:none{ 
      #{$prop}: 0; 
    } 
  } 
  .#{$prefix}-ve{ 
    #{$prop}-top: $initialValue; 
    #{$prop}-bottom: $initialValue; 
    &\:xs{ 
      #{$prop}-top: calc(#{$initialValue} / 3); 
      #{$prop}-bottom: calc(#{$initialValue} / 3); 
    } 
    &\:sm{ 
      #{$prop}-top: calc(#{$initialValue} / 2); 
      #{$prop}-bottom: calc(#{$initialValue} / 2); 
    } 
    &\:md{ 
      #{$prop}-top: calc(#{$initialValue} * 2); 
      #{$prop}-bottom: calc(#{$initialValue} * 2); 
    } 
    &\:lg{ 
      #{$prop}-top: calc(#{$initialValue} * 3); 
      #{$prop}-bottom: calc(#{$initialValue} * 3); 
    } 
    &\:xl{ 
      #{$prop}-top: calc(#{$initialValue} * 4); 
      #{$prop}-bottom: calc(#{$initialValue} * 4); 
    } 
    &\:none{ 
      #{$prop}: 0; 
    } 
  } 
}
/* 
  BORDER STYLES
  This is an static mixin used to include a class
  which can manipulate all border styles
*/
@mixin classBorderStyles($prefix){
  $bordstyles: none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset; 
  @each $key in $bordstyles{ 
    .#{$prefix}{ 
      &\:#{$key}{
        border-style: #{$key}; 
      }
      &-t\:#{$key}{ 
        border-top-style: $key; 
      } 
      &-r\:#{$key}{ 
        border-right-style: $key; 
      } 
      &-l\:#{$key}{ 
        border-left-style: $key; 
      } 
      &-b\:#{$key}{
        border-bottom-style: $key; 
      } 
      &-hz\:#{$key}{ 
        border-top-style: $key; 
        border-bottom-style: $key; 
      } 
      &-ve\:#{$key}{ 
        border-right-style: $key; 
        border-left-style: $key; 
      }
    } 
  }
}
/* 
  BORDER RADIUS TOP & BOTTOM 
  Create a short and bottom border radius shortcut 
  to be used as round-top[sizes] and round-bottom[sizes] 
*/
@mixin classBorderRadiusTopBottom($prefix){
  $shortrounds: t, b; 
  @each $key in $shortrounds{ 
    .#{$prefix}-#{$key}{ 
      @extend .#{$prefix}-#{$key}r; 
      @extend .#{$prefix}-#{$key}l; 
      &\:xs{
        @extend .#{$prefix}-#{$key}r\:xs; 
        @extend .#{$prefix}-#{$key}l\:xs; 
      } 
      &\:sm{ 
        @extend .#{$prefix}-#{$key}r\:sm; 
        @extend .#{$prefix}-#{$key}l\:sm; 
      } 
      &\:md{ 
        @extend .#{$prefix}-#{$key}r\:md; 
        @extend .#{$prefix}-#{$key}l\:md; 
      } 
      &\:lg{ 
        @extend .#{$prefix}-#{$key}r\:lg; 
        @extend .#{$prefix}-#{$key}l\:lg; 
      } 
      &\:xl{ 
        @extend .#{$prefix}-#{$key}r\:xl; 
        @extend .#{$prefix}-#{$key}l\:xl; 
      } 
      &\:none{ 
        @extend .#{$prefix}-#{$key}r\:none;
        @extend .#{$prefix}-#{$key}l\:none;
      } 
    } 
  } 
}
/* 
  BORDER RADIUS 100% (CIRCLE) 
*/
@mixin classBorderRadiusCircle($prefix){
  .#{$prefix}-cc{ 
    border-radius: 100%; 
  }
}
/*
  CENTRALIZERS
*/
@mixin centralizers($prefix){
  .#{$prefix}{
    &\:auto{
      display: block;
      position: relative;
      margin: 0 auto;
    }
    &\:flex{
      display: flex;
      align-items: center;
      justify-content: center;
      flex-wrap: wrap;
    }
    &\:abs{
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
    &-hz{
      &\:flex{
        @extend .#{$prefix}\:flex;
        align-items: unset;  
      }
    }
    &-ve{
      &\:flex{
        @extend .#{$prefix}\:flex;
        justify-content: unset;
      }
    }
  }
}
/* 
  WIDTH AND HEIGHT LIMITS
*/
@mixin whLimiters($prefix, $prop){
  .#{$prefix}{
    &\:full{
      #{$prop}:100%;
    }
    &\:auto{
      #{$prop}:auto; 
    }
    &\:none{
      #{$prop}:0;
    }
    &\:max-100{
      max-#{$prop}:100%;
    }
  }
}
/*
  BREAKPOINS
*/
$mobile-sm: 320px;
$mobile-md: 375px;
$mobile: 425px;
$tablet: 768px;
$laptop: 1024px;
$desktop: 1440px;
$desktop-lg: 2560px;
/*
  HIDINGS
*/
@mixin hideAt($breakpoint){
  @media screen and(max-width: $breakpoint){
    display: none !important;
  }
}
@mixin hideFrom($min, $max){
  @media screen and (min-width: $min) and (max-width: $max){
    display: none !important;
  }
}
@mixin classHidings($prefix){
  .#{$prefix}{
    display: none !important;
    &\:offscreen{
      visibility: hidden !important;
      opacity: 0 !important;
      display: fixed !important;
      z-index: -1 !important;
      top: -100vh !important;
    }
    // by breakpoint
    &\:mobile-sm{
      @include hideAt($mobile-sm);
      &-only{
        @include hideAt($mobile-sm);
      }
    }
    &\:mobile-md{
      @include hideAt($mobile-md);
      &-only{
        @include hideFrom($mobile-sm, $mobile-md);
      }
    }
    &\:mobile{
      @include hideAt($mobile);
      &-only{
        @include hideFrom($mobile-md, $mobile);
      }
    }
    &\:tablet{
      @include hideAt($tablet);
      &-only{
        @include hideFrom($mobile, $tablet);
      }
    }
    &\:laptop{
      @include hideAt($laptop);
      &-only{
        @include hideFrom($tablet, $laptop);
      }      
    }
    &\:desktop{
      @include hideAt($desktop);
      &-only{
        @include hideFrom($laptop, $desktop);
      }      
    }
    &\:desktop-lg{
      @include hideAt($desktop-lg);
      &-only{
        @media screen and(min-width: $desktop){
          display: none !important;
        }
      }      
    }
  }
}